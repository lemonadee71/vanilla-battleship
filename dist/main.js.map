{"version":3,"sources":["webpack://battleship-vanilla/./src/App.js","webpack://battleship-vanilla/./src/Game.js","webpack://battleship-vanilla/./src/PreGame.js","webpack://battleship-vanilla/./src/component.js","webpack://battleship-vanilla/./src/components/Board.js","webpack://battleship-vanilla/./src/components/PlayerBoard.js","webpack://battleship-vanilla/./src/enemy.js","webpack://battleship-vanilla/./src/event.js","webpack://battleship-vanilla/./src/modules/Gameboard.js","webpack://battleship-vanilla/./src/modules/Player.js","webpack://battleship-vanilla/./src/modules/Ship.js","webpack://battleship-vanilla/./src/placeShips.js","webpack://battleship-vanilla/./src/utils.js","webpack://battleship-vanilla/webpack/bootstrap","webpack://battleship-vanilla/webpack/runtime/define property getters","webpack://battleship-vanilla/webpack/runtime/hasOwnProperty shorthand","webpack://battleship-vanilla/webpack/runtime/make namespace object","webpack://battleship-vanilla/./src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAA0B;AACsB;;AAEhD;AACA,sBAAsB,uDAAW;AACjC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS,4CAAI;AACb;AACA;AACA;AACA;AACA;AACA,cAAc,4CAAI;AAClB;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,2BAA2B,sBAAsB;AACjD;AACA,cAAc,4CAAI,GAAG,8CAAI,qCAAqC;AAC9D;AACA;AACA;AACA;AACA;;AAEA,iEAAe,GAAG,EAAC;;;;;;;;;;;;;;;;;;;;;;;AC/D6B;AACL;AACT;AACY;AACK;AACvB;AACG;AACC;;AAEhC;AACA,0BAA0B;AAC1B,0BAA0B,uDAAW;AACrC,sBAAsB,uDAAW;;AAEjC,SAAS,cAAc,GAAG,6CAAU;AACpC;AACA;;AAEA,sBAAsB,uDAAW,CAAC,oDAAkB;;AAEpD;AACA,mBAAmB,yBAAyB;AAC5C,iBAAiB,4CAAI;AACrB;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA,YAAY,+CAAQ;AACpB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oDAAkB;AAC3D;AACA,OAAO;AACP;AACA;;AAEA;AACA,IAAI,+CAAC;AACL;;AAEA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,oBAAoB,aAAa;;AAEjC;AACA,MAAM,+CAAC,qBAAqB,aAAa;AACzC,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,kBAAkB,mBAAmB,OAAO;;AAEnE;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,MAAM,gDAAU;AAChB,yBAAyB,kBAAkB;AAC3C,KAAK;AACL;;AAEA;AACA,IAAI,+CAAS;AACb,IAAI,+CAAS;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,8CAAQ;AACV,EAAE,8CAAQ;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAAS,4CAAI;AACb,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA,cAAc,iDAAO;AACrB,cAAc,4CAAI,gCAAgC,kBAAkB;AACpE;AACA,oBAAoB;AACpB,oBAAoB,gEAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;;;ACxIe;AACU;AACC;AACP;;AAEvC;AACA;AACA,wBAAwB,oDAAkB;AAC1C;;AAEA;AACA;AACA,yBAAyB,0DAAkB,wBAAwB;AACnE;AACA,GAAG;;AAEH,SAAS,4CAAI,YAAY,sBAAsB;AAC/C,eAAe,mBAAmB;AAClC;AACA;AACA,QAAQ,0DAAK;AACb;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;AC5BQ;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,4CAAI;AACjB,2BAA2B,KAAK;AAChC,sBAAsB,SAAS,IAAI,GAAG;;AAEtC;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA,aAAa,4CAAI;AACjB,oCAAoC,GAAG;AACvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,QAAQ,GAAG,cAAc;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,KAAK;AAClB;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,gCAAgC,aAAa;AAC7C;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,kDAAkD,GAAG;;AAErD,iDAAiD,aAAa;AAC9D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,WAAW,EAAE,KAAK,EAAE,eAAe;AACnE;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,yBAAyB,0CAA0C;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,uCAAuC,GAAG;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,0CAA0C;AAC7D,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;AACH,CAAC;;AAED;AACA,cAAc,4CAAI;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAE8D;;;;;;;;;;;;;;;;;ACjY1B;AACU;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,EAAE,4CAAI;AACN;AACA,2CAA2C,KAAK,OAAO;AACvD,MAAM,4BAA4B,OAAO;AACzC,OAAO;AACP,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,YAAY,4CAAI;AAChB,0BAA0B,EAAE,GAAG,EAAE;AACjC,4BAA4B,0DAAkB,OAAO;AACrD,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;;;;ACjCsB;AACG;AACjB;AACD;;AAE5B;AACA,SAAS,8BAA8B;AACvC,oBAAoB,uDAAW;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,gDAAU;AAClB;;AAEA,MAAM,gDAAU;AAChB,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,0DAAkB,iCAAiC;AAC5E;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA,SAAS,+CAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDuB;AAC1B;AACI;;AAE5B;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,YAAY;AACvB,iBAAiB,+DAAc;AAC/B,iBAAiB,+CAAC;AAClB,0BAA0B,eAAe,qBAAqB,KAAK;AACnE;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gBAAgB,aAAa,gBAAgB,KAAK,aAAa,eAAe;AAC9E;AACA;;AAEA;;AAEA;AACA,IAAI,8CAAQ;AACZ,IAAI,8CAAQ;AACZ;;AAEA;AACA,IAAI,+CAAS;AACb,IAAI,+CAAS;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;AClExB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qCAAqC,cAAc;AACnD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;AC5CW;;AAEhC;AACA,qBAAqB,WAAW;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,sBAAsB,6BAA6B;AACnD;;AAEA,eAAe,4CAAI;AACnB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,yCAAyC,UAAU,GAAG,EAAE,IAAI,GAAG;;AAE/D;AACA;AACA;;AAEA;;AAEA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,WAAW,cAAc;;AAE/B;AACA;AACA;;AAEA;AACA,8BAA8B,EAAE,IAAI,EAAE;AACtC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;AC7KzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAEoD;;;;;;;;;;;;;;;ACpBrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;;;AClBc;AACU;AACO;AACT;;AAE1C;AACA,uBAAuB,2DAAS;;AAEhC;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,gEAAe;AAClC,0BAA0B,wCAAc;AACxC,uBAAuB,kDAAI;;AAE3B;AACA,gCAAgC,gBAAgB;AAChD;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjClC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gCAAgC;AAC3E;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,CAAC,EAAC;AACmB;;;;;;;UCzCpC;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;ACNqC;AACb;;AAExB,0BAA0B,kDAAM,CAAC,6CAAG","file":"main.js","sourcesContent":["import Game from './Game';\nimport { html, createState } from './component';\n\nconst App = () => {\n  const isGameStart = createState(false);\n  let mode = 'test';\n  let numberOfEnemies = 1;\n\n  const changeMode = (e) => {\n    mode = e.target.value;\n  };\n\n  const startGame = () => {\n    if (numberOfEnemies > 9) {\n      alert('Max number of enemies is 9.');\n      return;\n    }\n\n    isGameStart.value = true;\n  };\n\n  const restartGame = () => {\n    isGameStart.value = false;\n    mode = 'test';\n    numberOfEnemies = 1;\n  };\n\n  const changeNumberOfEnemies = (e) => {\n    numberOfEnemies = +e.target.value;\n  };\n\n  return html`<div>\n    <h1 class=\"title\">Battleship</h1>\n    <div\n      ${{\n        $content: isGameStart.bindValue((val) =>\n          !val\n            ? html`\n                <label for=\"mode\">Choose difficulty:</label>\n                <select name=\"mode\" ${{ onChange: changeMode }}>\n                  <option value=\"test\" selected>Test</option>\n                  <option value=\"normal\">Normal</option>\n                  <option value=\"medium\">Intermediate</option>\n                  <option value=\"hard\">Hard</option>\n                </select>\n                <label for=\"numberOfEnemies\">Number of enemy computer:</label>\n                <input\n                  name=\"numberOfEnemies\"\n                  placeholder=\"Number of enemy computer\"\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"9\"\n                  ${{ onChange: changeNumberOfEnemies }}\n                />\n                <button ${{ onClick: startGame }}>Start game</button>\n              `\n            : html`${Game(mode, numberOfEnemies, restartGame)}`\n        ),\n      }}\n    ></div>\n  </div>`;\n};\n\nexport default App;\n","import { createState, html } from './component';\nimport difficulty from './difficulty.json';\nimport $, { uuid } from './utils';\nimport placeShipsInRandom from './placeShips';\nimport PlayerBoard from './components/PlayerBoard';\nimport event from './event';\nimport createAI from './enemy';\nimport PreGame from './PreGame';\n\nconst Game = (mode, numberOfEnemies, restartHandler) => {\n  const isInTransition = { value: false };\n  const isFinishPlacing = createState(false);\n  const currentTurn = createState(1);\n\n  const { size, ships } = difficulty[mode];\n  const allPlayers = new Map();\n  const defeatedPlayers = [];\n\n  const playerBoard = createState(placeShipsInRandom(size, ships));\n\n  const generatePlayers = () => {\n    for (let i = 1; i < numberOfEnemies + 2; i++) {\n      const id = uuid(4);\n      // TODO: allow users to choose the player type\n      const type = i === 1 ? 'player' : 'computer';\n      const { init, destroy } =\n        type === 'computer'\n          ? createAI(i, numberOfEnemies + 1, size)\n          : { init: null, destroy: null };\n\n      allPlayers.set(i, {\n        id,\n        type,\n        init,\n        destroy,\n        number: i,\n        gameboard: type === 'computer' ? placeShipsInRandom(size, ships) : null,\n        isDefeated: false,\n      });\n    }\n  };\n\n  const announce = (text) => {\n    $('#announcement').textContent = text;\n  };\n\n  const finishGame = () => {\n    alert(`Player ${currentTurn.value} wins!`);\n    restartGame();\n    // setTimeout(restartGame, 500);\n  };\n\n  const playerDefeated = (playerNumber) => {\n    defeatedPlayers.push(playerNumber);\n\n    const player = allPlayers.get(playerNumber);\n    player.isDefeated = true;\n\n    if (player.destroy) player.destroy();\n\n    const alive = [...allPlayers.values()].filter((p) => !p.isDefeated);\n    const isGameOver = alive && alive.length === 1;\n\n    alert(`Player ${playerNumber} is defeated`);\n\n    if (!isGameOver) {\n      $(`[data-board-num=\"${playerNumber}\"`).remove();\n    } else {\n      finishGame();\n    }\n  };\n\n  const nextTurn = (target) => {\n    isInTransition.value = true;\n    announce(`Player ${currentTurn.value} attacked Player ${target}`);\n\n    do {\n      currentTurn.value++;\n    } while (defeatedPlayers.includes(currentTurn.value));\n\n    if (currentTurn.value > numberOfEnemies + 1) {\n      currentTurn.value = [...allPlayers.values()]\n        .map((player) => player.number)\n        .filter((num) => !defeatedPlayers.includes(num))[0];\n    }\n\n    setTimeout(() => {\n      isInTransition.value = false;\n\n      event.emit('next turn', currentTurn.value);\n      announce(`Player ${currentTurn.value} turn`);\n    }, 300);\n  };\n\n  const restartGame = () => {\n    event.off('player defeated', playerDefeated);\n    event.off('attack received', nextTurn);\n    [...allPlayers.values()].map(\n      (player) => player.destroy && player.destroy()\n    );\n    restartHandler();\n  };\n\n  // Initialize game\n  event.on('player defeated', playerDefeated);\n  event.on('attack received', nextTurn);\n\n  // Initialize players\n  generatePlayers();\n  [...allPlayers.values()].map((player) => player.init && player.init());\n\n  const finishPlacing = () => {\n    // TODO: Allow multiple placing for multiple players\n    allPlayers.get(1).gameboard = playerBoard.value;\n    isFinishPlacing.value = true;\n  };\n\n  return html`\n    <button ${{ onClick: restartGame }}>Restart</button>\n    <div\n      ${{\n        $content: isFinishPlacing.bindValue((val) =>\n          !val\n            ? PreGame(playerBoard, size, ships, finishPlacing)\n            : html`<h2 id=\"announcement\">Player ${currentTurn.value} turn</h2>\n                <div class=\"container\">\n                  ${[...allPlayers.values()].map((player) =>\n                    PlayerBoard(player, currentTurn, isInTransition)\n                  )}\n                </div>`\n        ),\n      }}\n    ></div>\n  `;\n};\n\nexport default Game;\n","import { html } from './component';\nimport { determineCellClass } from './utils';\nimport placeShipsInRandom from './placeShips';\nimport Board from './components/Board';\n\nconst PreGame = (playerBoard, size, ships, finish) => {\n  const randomize = () => {\n    playerBoard.value = placeShipsInRandom(size, ships);\n  };\n\n  const cellProps = ([x, y]) => ({\n    $class: playerBoard.bindValue(\n      (state) => `cell ${determineCellClass(state.get(x, y), true)}`\n    ),\n  });\n\n  return html`<button ${{ onClick: randomize }}>Randomize</button>\n    <button ${{ onClick: finish }}>Finish placing</button>\n    <h2>Place your ships</h2>\n    <div class=\"container\">\n      ${Board({\n        size,\n        cellProps,\n        board: playerBoard.value.getBoard(),\n      })}\n    </div>`;\n};\n\nexport default PreGame;\n","import { uuid } from './utils';\n\nconst stateStore = new Map();\nconst defaultProps = ['textContent', 'innerHTML', 'outerHTML', 'innerText'];\nconst booleanAttributes = [\n  'checked',\n  'selected',\n  'disabled',\n  'readonly',\n  'multiple',\n  'ismap',\n  'noresize',\n  'reversed',\n  'autocomplete',\n];\n\nconst isObject = (val) => typeof val === 'object';\nconst isArray = (val) => Array.isArray(val);\nconst isTemplate = (val) => val._type && val._type === 'template';\nconst isEventListeners = (val) =>\n  isObject(val) && Object.keys(val).every((key) => key.startsWith('on'));\nconst isState = (val) =>\n  isObject(val) && Object.keys(val).every((key) => key.startsWith('$'));\nconst isBooleanAttribute = (val) => booleanAttributes.includes(val);\nconst isStyleAttribute = (str) => str.startsWith('$style:');\nconst isDefaultProps = (val) =>\n  isObject(val) && Object.keys(val).every((key) => defaultProps.includes(key));\n\nconst _handlerTypeReducer = (str) => {\n  let type;\n  if (defaultProps.includes(str.replace('$', ''))) {\n    type = 'prop';\n  } else if (isStyleAttribute(str)) {\n    type = 'style';\n  } else if (str.replace('$', '') === 'content') {\n    type = 'content';\n  } else {\n    type = 'attr';\n  }\n\n  return type;\n};\n\nconst _handlerValueReducer = (type, obj) => {\n  switch (type) {\n    case 'listener':\n      return {\n        name: obj[0].replace('on', '').toLowerCase(),\n        value: obj[1],\n      };\n    case 'prop':\n      return {\n        name: obj[0].replace('$', ''),\n        value: obj[1],\n      };\n    case 'attr':\n      return {\n        name: obj[0].replace('$', ''),\n        value: obj[1],\n      };\n    case 'style':\n      return {\n        name: obj[0],\n        value: obj[1],\n      };\n    case 'text':\n      return {\n        value: obj[1],\n      };\n    case 'content':\n      return {\n        value: obj[1],\n      };\n    default:\n      throw new Error('Invalid handler type.');\n  }\n};\n\nconst _generateHandler = (type, obj) => {\n  const arr = [];\n  const id = uuid();\n  const attrName = `data-${type}-id`;\n  const dataAttr = `${attrName}=\"${id}\"`;\n\n  Object.entries(obj).forEach((item) => {\n    arr.push({\n      type,\n      query: `[${dataAttr}]`,\n      data: _handlerValueReducer(type, item),\n      attr: attrName,\n      remove: false,\n    });\n  });\n\n  arr[arr.length - 1].remove = true;\n\n  return [arr, dataAttr];\n};\n\nconst _bindState = (state) => {\n  const id = uuid();\n  const proxyId = `data-proxy-id=\"${id}\"`;\n  const handlers = {};\n\n  Object.entries(state).forEach(([key, handler]) => {\n    const bindedElements = stateStore.get(handler._id);\n    const existingHandlers = bindedElements.get(id) || [];\n\n    const finalValue = handler.trap\n      ? handler.trap.call(null, handler.value)\n      : handler.value;\n    const target = key.replace('$style:', '').replace('$', '');\n    const type = _handlerTypeReducer(key);\n\n    // Store the new handlers\n    bindedElements.set(id, [\n      ...existingHandlers,\n      {\n        type,\n        target,\n        propName: handler.propName,\n        trap: handler.trap,\n      },\n    ]);\n\n    if (!handlers[type]) {\n      handlers[type] = {};\n    }\n\n    handlers[type][target] = finalValue;\n  });\n\n  const [allHandlers, str] = Object.entries(handlers)\n    .map(([type, obj]) => _generateHandler(type, obj))\n    .reduce(\n      (prev, current) => [\n        [...prev[0], ...current[0]],\n        [...prev[1], current[1]],\n      ],\n      [[], []]\n    );\n\n  return [allHandlers, `${proxyId} ${str.join(' ')}`];\n};\n\n// return value is [str, array]\nconst _parser = (expr, handlers = []) => {\n  // if expr is array, map and parse each item\n  // items must be all strings after parsing\n  if (isArray(expr)) {\n    const [strArray, handlersArray] = expr\n      .map((item) => _parser(item, handlers))\n      .reduce(\n        (prev, current) => [\n          [...prev[0], current[0]],\n          [...prev[1], ...current[1]],\n        ],\n        [[], []]\n      );\n\n    return [strArray.join(''), handlersArray];\n  }\n\n  // if template\n  // add its handlers to ours\n  // then return the string\n  if (isTemplate(expr)) {\n    return [expr[0], [...handlers, ...expr[1]]];\n  }\n\n  // if Object and that object contains only keys which name is an event\n  // generate a temporary id and replace the object with it\n  // then add the event listeners to our handlers\n  if (isEventListeners(expr)) {\n    const [eventHandlers, id] = _generateHandler('listener', expr);\n\n    return [id, [...handlers, ...eventHandlers]];\n  }\n\n  if (isState(expr)) {\n    const [propHandlers, id] = _bindState(expr);\n    return [id, [...handlers, ...propHandlers]];\n  }\n\n  if (isDefaultProps(expr)) {\n    const [defaultPropHandlers, id] = _generateHandler('prop', expr);\n    return [id, [...handlers, ...defaultPropHandlers]];\n  }\n\n  // if none of our accepted types, assume it is string\n  // then just return it\n  return [`${expr}`, []];\n};\n\nconst _createTemplate = (arr) => {\n  const arrayLikeObj = {};\n\n  arr.forEach((i, idx) => {\n    arrayLikeObj[idx] = arr[idx];\n  });\n\n  arrayLikeObj.length = arr.length;\n  arrayLikeObj._type = 'template';\n\n  Object.defineProperty(arrayLikeObj, '_type', {\n    enumerable: false,\n  });\n\n  return arrayLikeObj;\n};\n\nconst _replacePlaceholders = (str) => {\n  let newString = str;\n  let match = newString.match(/{%\\s*(.*)\\s*%}/);\n  const handlers = [];\n\n  while (match) {\n    const [textHandlers, id] = _generateHandler('text', {\n      text: match[1].trim(),\n    });\n\n    handlers.push(...textHandlers);\n\n    newString = newString.replace(match[0], `<i ${id}></i>`);\n\n    match = newString.slice(match.index).match(/{%\\s*(.*)\\s*%}/);\n  }\n\n  return [newString, handlers];\n};\n\nconst parseString = (strings, ...exprs) => {\n  const [evaluatedExprs, handlers] = exprs\n    .map((expr) => _parser(expr))\n    .reduce(\n      (prev, current) => [\n        [...prev[0], current[0]],\n        [...prev[1], ...current[1]],\n      ],\n      [[], []]\n    );\n\n  const htmlString = evaluatedExprs.reduce(\n    (fullString, expr, i) => `${fullString}${expr}${strings[i + 1]}`,\n    strings[0]\n  );\n\n  const [sanitizedString, textHandlers] = _replacePlaceholders(htmlString);\n  handlers.push(...textHandlers);\n\n  return _createTemplate([sanitizedString, handlers]);\n};\n\nconst html = (strings, ...exprs) => parseString(strings, ...exprs);\n\nconst _modifyElement = ({ element, type, data, context = document }) => {\n  const el = context.querySelector(element);\n\n  switch (type) {\n    case 'prop':\n      el[data.name] = data.value;\n      break;\n    case 'attr':\n      if (isBooleanAttribute(data.name)) {\n        if (data.value) {\n          el.setAttribute(data.name, '');\n        } else {\n          el.removeAttribute(data.name);\n        }\n      } else {\n        el.setAttribute(data.name, data.value);\n      }\n\n      break;\n    case 'listener':\n      el.addEventListener(data.name, data.value);\n      break;\n    case 'text':\n      el.replaceWith(document.createTextNode(data.value));\n      break;\n    case 'style':\n      el.style[data.name] = data.value;\n      break;\n    case 'content':\n      [...el.children].map((child) => child.remove());\n\n      el.appendChild(\n        data.value instanceof HTMLElement\n          ? data.value\n          : render(html`${data.value}`)\n      );\n\n      break;\n    default:\n      throw new Error('Invalid type.');\n  }\n};\n\nconst createElementFromString = (str, handlers = []) => {\n  const createdElement = document.createRange().createContextualFragment(str);\n\n  handlers.forEach((handler) => {\n    const el = createdElement.querySelector(handler.query);\n\n    if (!el) return;\n\n    _modifyElement({\n      element: handler.query,\n      type: handler.type,\n      data: handler.data,\n      context: createdElement,\n    });\n\n    if (handler.remove) {\n      el.removeAttribute(handler.attr);\n    }\n  });\n\n  return createdElement;\n};\n\nconst render = (template) => createElementFromString(...Array.from(template));\n\nconst _setHandler = (stateId) => ({\n  set: (target, prop, value, receiver) => {\n    const bindedElements = stateStore.get(stateId);\n\n    bindedElements.forEach((handlers, id) => {\n      const query = `[data-proxy-id=\"${id}\"]`;\n      const el = document.querySelector(query);\n\n      if (el) {\n        handlers.forEach((handler) => {\n          if (prop !== handler.propName) return;\n\n          const finalValue = handler.trap\n            ? handler.trap.call(null, value)\n            : value;\n\n          _modifyElement({\n            element: query,\n            type: handler.type,\n            data: { name: handler.target, value: finalValue },\n          });\n        });\n      } else {\n        // delete handler when the target is unreachable (most likely deleted)\n        bindedElements.delete(id);\n      }\n    });\n\n    return Reflect.set(target, prop, value, receiver);\n  },\n});\n\nconst createState = (initValue = null) => {\n  const _id = uuid();\n  // Map contains id keys\n  // id keys are proxy ids of elements binded to the state\n  stateStore.set(_id, new Map());\n\n  const state = {\n    bindValue: (trap = null) => ({\n      propName: 'value',\n      trap,\n      _id,\n      value: state.value,\n    }),\n    bind: (propName = 'value', trap = null) => ({\n      propName,\n      trap,\n      _id,\n      value: propName === 'value' ? state.value : state.value[propName],\n    }),\n  };\n\n  if (isObject(initValue)) {\n    state.value = new Proxy(initValue, _setHandler(_id));\n  } else {\n    state.value = initValue;\n  }\n\n  return new Proxy(state, _setHandler(_id));\n};\n\nexport { html, render, createElementFromString, createState };\n","import { html } from '../component';\nimport { determineCellClass } from '../utils';\n\n// TODO: make this a custom component if needed\nconst Board = ({\n  number,\n  size,\n  board,\n  clickHandler,\n  boardProps = null,\n  cellProps,\n}) =>\n  html`<div\n    class=\"grid\"\n    style=\"grid-template-columns: repeat(${size}, 1fr);\"\n    ${number ? `data-board-num=\"${number}\"` : ''}\n    ${{ onClick: clickHandler }}\n    ${boardProps || ''}\n  >\n    ${board\n      .map((row, i) =>\n        row.map(\n          (cell, j) =>\n            html`<div\n              data-pos=\"${i}-${j}\"\n              class=\"cell ${determineCellClass(cell)}\"\n              ${cellProps.call(null, [i, j])}\n            ></div>`\n        )\n      )\n      .flat()}\n  </div>`;\n\nexport default Board;\n","import { createState } from '../component';\nimport { determineCellClass } from '../utils';\nimport event from '../event';\nimport Board from './Board';\n\nconst PlayerBoard = (player, currentTurn, inTransition) => {\n  const { id, type, number, gameboard } = player;\n  const thisBoard = createState(gameboard.getBoard());\n\n  const clickHandler = (e) => {\n    if (\n      !e.target.matches('.cell') ||\n      number === currentTurn.value ||\n      inTransition.value\n    )\n      return;\n\n    try {\n      const [x, y] = e.target.getAttribute('data-pos').split('-');\n\n      gameboard.receiveAttack(x, y);\n      thisBoard.value = gameboard.getBoard();\n\n      if (gameboard.isGameOver()) {\n        event.emit('player defeated', number);\n      }\n\n      event.emit('attack received', number);\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n\n  const cellProps = ([x, y]) => ({\n    $class: thisBoard.bindValue(\n      (board) => `cell ${determineCellClass(board[x][y], type === 'player')}`\n    ),\n  });\n\n  const boardProps = {\n    '$style:border': currentTurn.bindValue((turn) =>\n      turn === number ? '3px solid rgb(206, 18, 18)' : '3px solid black'\n    ),\n  };\n\n  return Board({\n    number,\n    clickHandler,\n    cellProps,\n    boardProps,\n    board: thisBoard.value,\n    size: gameboard.size,\n  });\n};\n\nexport default PlayerBoard;\n","import { doRandomAttack } from './modules/Player';\nimport $ from './utils';\nimport event from './event';\n\nconst createAI = (playerNumber, numberOfPlayers, boardSize) => {\n  const allMoves = [...new Array(numberOfPlayers).fill(null)].map((arr, i) => ({\n    number: i + 1,\n    pastMoves: [],\n  }));\n  const defeatedPlayers = [];\n\n  const _determinePlayerToAttack = () => {\n    let playerToAttack = '';\n\n    do {\n      playerToAttack = Math.floor(Math.random() * numberOfPlayers) + 1;\n    } while (\n      defeatedPlayers.includes(playerToAttack) ||\n      playerToAttack === playerNumber\n    );\n\n    return playerToAttack;\n  };\n\n  const _attack = (currentTurn) => {\n    if (currentTurn !== playerNumber) return;\n\n    const playerToAttack = _determinePlayerToAttack();\n    const { pastMoves } = allMoves.find((obj) => obj.number === playerToAttack);\n    const move = doRandomAttack(boardSize, pastMoves).join('-');\n    const cell = $(\n      `[data-board-num=\"${playerToAttack}\"] .cell[data-pos=\"${move}\"]`\n    );\n\n    pastMoves.push(move);\n\n    if (['cell hit', 'cell missed'].includes(cell.className)) {\n      _attack(currentTurn);\n      return;\n    }\n\n    cell.click();\n\n    console.log(\n      `Player ${playerNumber} attacks cell ${move} of player ${playerToAttack}'s board`\n    );\n  };\n\n  const _addDefeatedPlayer = (player) => defeatedPlayers.push(player);\n\n  const init = () => {\n    event.on('next turn', _attack);\n    event.on('player defeated', _addDefeatedPlayer);\n  };\n\n  const destroy = () => {\n    event.off('next turn', _attack);\n    event.off('player defeated', _addDefeatedPlayer);\n  };\n\n  return {\n    init,\n    destroy,\n  };\n};\n\nexport default createAI;\n","class EventEmitter {\n  constructor() {\n    this.events = new Map();\n  }\n\n  on(eventName, fn, options) {\n    if (!this.events.has(eventName)) {\n      this.events.set(eventName, []);\n    }\n\n    this.events.get(eventName).push({ fn, options });\n  }\n\n  off(eventName, fn) {\n    const handlers = this.events\n      .get(eventName)\n      .filter((handler) => handler.fn !== fn);\n\n    this.events.set(eventName, handlers);\n  }\n\n  clear() {\n    this.events.clear();\n  }\n\n  delete(eventName) {\n    this.events.delete(eventName);\n  }\n\n  emit(eventName, payload = null) {\n    const handlers = this.events.get(eventName) || [];\n\n    handlers.forEach((handler) => {\n      handler.fn.call(null, payload);\n\n      if (handler.options && handler.options.once) {\n        this.off(eventName, handler.fn);\n      }\n    });\n  }\n}\n\nconst event = new EventEmitter();\n\nexport default event;\n","import { uuid } from '../utils';\n\nconst tryCatchForLoop = (limit, fn, start = 0) => {\n  for (let i = start; i < limit; i++) {\n    try {\n      fn.call(null, i);\n    } catch (error) {\n      continue;\n    }\n  }\n};\n\nconst Gameboard = (size) => {\n  const state = {\n    ships: new Map(),\n  };\n\n  let board = [...new Array(size).fill([])].map(() => [\n    ...new Array(size).fill(null),\n  ]);\n\n  const reset = () => {\n    board = [...new Array(size).fill([])].map(() => [\n      ...new Array(size).fill(null),\n    ]);\n    state.ships.clear();\n  };\n\n  const get = (row, col) => {\n    if (row < 0 || row > size - 1 || col < 0 || col > size - 1) {\n      throw new Error('Coordinates is off bounds');\n    }\n\n    return board[row][col];\n  };\n\n  const getBoard = () => [...board].map((row) => [...row]);\n\n  const setBoard = (newBoard) => {\n    board = newBoard;\n  };\n\n  const _markSurroundings = (pos, length, direction) => {\n    const boardCopy = getBoard();\n    const [rowLimit, columnLimit] =\n      direction === 'y' ? [length + 2, 2] : [2, length + 2];\n\n    const start = [pos.start.row - 1, pos.start.col - 1];\n    const end = [pos.end.row + 1, pos.end.col + 1];\n\n    tryCatchForLoop(columnLimit, (i) => {\n      get(start[0], start[1] + i);\n      boardCopy[start[0]][start[1] + i] = undefined;\n    });\n    tryCatchForLoop(columnLimit, (i) => {\n      get(end[0], end[1] - i);\n      boardCopy[end[0]][end[1] - i] = undefined;\n    });\n    tryCatchForLoop(rowLimit, (i) => {\n      get(start[0] + i, start[1]);\n      boardCopy[start[0] + i][start[1]] = undefined;\n    });\n    tryCatchForLoop(rowLimit, (i) => {\n      get(end[0] - i, end[1]);\n      boardCopy[end[0] - i][end[1]] = undefined;\n    });\n\n    setBoard(boardCopy);\n  };\n\n  const placeShip = ({ pos, ship, direction = 'x' }) => {\n    const boardCopy = getBoard();\n\n    const id = uuid(4);\n    state.ships.set(id, ship);\n\n    const [rowIncrement, columnIncrement] = direction === 'y' ? [1, 0] : [0, 1];\n    const [row, col] = pos;\n\n    // Check if cell is already marked\n    if (typeof get(row, col) === 'string') throw new Error('Cell occupied');\n\n    let xi = 0;\n    let yi = 0;\n\n    for (let i = 0; i < ship.length; i++) {\n      let marker;\n\n      // Check if placing will result in ship\n      // to go off the board\n      try {\n        marker = get(row + yi, col + xi);\n      } catch (error) {\n        throw new Error('Ship off-bounds');\n      }\n\n      // Throw error if placing will result in the ship\n      // occupying another ship's surroundings\n      if (marker === undefined) throw new Error('Cell within a ship territory');\n\n      // Throw error when placing will result in overlap\n      if (marker !== null) throw new Error('Ship overlaps');\n\n      boardCopy[row + yi][col + xi] = `${ship.name}[${i}]_${id}`;\n\n      xi += columnIncrement;\n      yi += rowIncrement;\n    }\n\n    setBoard(boardCopy);\n\n    const coordinates = {\n      start: { row, col },\n      end: {\n        row: direction === 'y' ? row + ship.length - 1 : row,\n        col: direction === 'x' ? col + ship.length - 1 : col,\n      },\n    };\n\n    _markSurroundings(coordinates, ship.length, direction);\n\n    return true;\n  };\n\n  const isGameOver = () =>\n    board.every((row) =>\n      row.every((cell) => ['HIT', 'MISS', null, undefined].includes(cell))\n    );\n\n  // v2\n  // return Array.from(state.ships, ([key, value]) => ({\n  //   key,\n  //   value,\n  // })).every(({ value: ship }) => ship.isSunk());\n\n  const receiveAttack = (x, y) => {\n    const boardCopy = getBoard();\n    const marker = get(x, y);\n\n    if (marker === 'HIT' || marker === 'MISS') {\n      throw new Error(`Cell[${x}][${y}] was already selected`);\n    }\n\n    if (!marker) {\n      boardCopy[x][y] = 'MISS';\n      setBoard(boardCopy);\n\n      return false;\n    }\n\n    const index = marker.match(/\\[(\\d)\\]/)[1];\n    const id = marker.split('_')[1];\n\n    const ship = state.ships.get(id);\n    ship.hit(index);\n\n    boardCopy[x][y] = 'HIT';\n    setBoard(boardCopy);\n\n    return true;\n  };\n\n  return {\n    size,\n    get,\n    getBoard,\n    reset,\n    placeShip,\n    receiveAttack,\n    isGameOver,\n  };\n};\n\nexport default Gameboard;\n","const makeMove = (size) => [\n  Math.floor(Math.random() * size),\n  Math.floor(Math.random() * size),\n];\n\nconst doRandomAttack = (size, pastMoves = []) => {\n  let move;\n\n  do {\n    move = makeMove(size);\n  } while (pastMoves.includes(move.join('-')));\n\n  return move;\n};\n\nconst doRandomPlacing = (size) => ({\n  pos: makeMove(size),\n  direction: Math.floor(Math.random() * 2) ? 'x' : 'y',\n});\n\nexport { makeMove, doRandomAttack, doRandomPlacing };\n","class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n    this.body = new Array(length).fill('O');\n  }\n\n  hit(coord) {\n    this.body[coord] = 'X';\n\n    return this;\n  }\n\n  isSunk() {\n    return this.body.every((part) => part === 'X');\n  }\n}\n\nexport default Ship;\n","import Ship from './modules/Ship';\nimport Gameboard from './modules/Gameboard';\nimport { doRandomPlacing } from './modules/Player';\nimport allShipDetails from './ships.json';\n\nconst placeShipsInRandom = (size, ships) => {\n  const currentBoard = Gameboard(size);\n\n  const allShips = [...ships];\n  let currentShip = null;\n\n  while (allShips.length) {\n    currentShip = allShips.shift();\n\n    let currentCount = currentShip.number;\n    while (currentCount) {\n      const move = doRandomPlacing(size);\n      const shipDetails = allShipDetails[currentShip.name];\n      const ship = new Ship(shipDetails.name, shipDetails.length);\n\n      try {\n        currentBoard.placeShip({ ship, ...move });\n        currentCount -= 1;\n      } catch (error) {\n        // console.warn(error.toString());\n        continue;\n      }\n    }\n  }\n\n  return currentBoard;\n};\n\nexport default placeShipsInRandom;\n","const uuid = (length = 10) => Math.random().toString(36).substr(2, length);\n\nconst $ = (query) => {\n  const [idFlag, allFlag, dataAttrFlag] = ['#', '--a', '@'];\n\n  const isId = query.includes(idFlag);\n  const isAll = query.includes(allFlag);\n  const isDataAttr = query.includes(dataAttrFlag);\n  const isDescendantSelector = query.includes(' ');\n\n  if (isId && !isDescendantSelector) {\n    return document.getElementById(query.replace(idFlag, ''));\n  }\n  if (isAll) {\n    return document.querySelectorAll(query.replace(allFlag, ''));\n  }\n  if (isDataAttr && !isDescendantSelector) {\n    return document.querySelector(`[data-${query.replace(dataAttrFlag, '')}]`);\n  }\n\n  return document.querySelector(query);\n};\n\nconst determineCellClass = (cell, condition = false) => {\n  switch (cell) {\n    case 'HIT':\n      return 'hit';\n    case 'MISS':\n      return 'missed';\n    case 'SUNK':\n      return 'sunk';\n    case undefined:\n      return 'occupied';\n    case null:\n      return '';\n    default:\n      return condition ? 'ship' : '';\n  }\n};\n\nexport default $;\nexport { uuid, determineCellClass };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { render } from './component';\nimport App from './App';\n\ndocument.body.appendChild(render(App()));\n"],"sourceRoot":""}